global:
  imagePullPolicy: Always
  vault:
   host: ip
   name: vault
   vaultToken: someToken


frontend:
  replicas: 1
  revisionHistoryLimit: 15
  strategy:
    type: Recreate
  service:
    port: 80
  ingress:
    host: front-vladislav.2sem.students-projects.ru
    path: /
    pathType: Prefix
    tlsSecretName: 2sem-students-projects-wildcard-secret
  containerPort: 80
  image: vladislavgs/sausage-frontend:latest
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "128Mi"
      cpu: "250m"
  nginxConf: nginx.conf

backend:
  annotations:
    path: /actuator/prometheus
    port: "8080"
    scrape: "true"
  env:
    postgresUri: jdbc:postgresql://postgresql:5432/sausage-store
    postgresUser: store
    postgresPassword: storepassword
    reportPath: /logs/reports
    logPath: /logs
  service:
    port: 8080
  revisionHistoryLimit: 15
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  
  image: vladislavgs/sausage-backend:latest
  imagePullPolicy: Always
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  containerPort: 8080
  readinessProbe:
    httpGet:
      path: /actuator/health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  livenessProbe:
    httpGet:
      path: /actuator/health
      port: 8080
    initialDelaySeconds: 60
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 3
  vpa:
    updatePolicy:
      updateMode: "Recreate"
    resourcePolicy:
      containerPolicies:
        - containerName: "*"
          minAllowed:
            memory: "256Mi"
            cpu: "100m"
          maxAllowed:
            memory: "512Mi"
            cpu: "1"
          controlledResources: ["cpu", "memory"]

backend-report:
  image: vladislavgs/sausage-backend-report:latest
  imagePullPolicy: Always
  revisionHistoryLimit: 15
  replicas: 1
  containerPort: 8081
  config:
    port: "8081"
  secret:
    db: "mongodb://root:rootpassword@mongodb:27017"
  service:
    type: ClusterIP
    port: 8081    
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "250m"
  strategy:
    type: Recreate
  livenessProbe:
    httpGet:
      path: /api/v1/health
      port: 8080
    initialDelaySeconds: 15
    periodSeconds: 10
  hpa:
    enabled: true  
    minReplicas: 1
    maxReplicas: 5
    averageUtilization: 75

infra:
  postgresql:
    env:
      POSTGRES_USER: store
      POSTGRES_PASSWORD: storepassword
      POSTGRES_DB: sausage-store
    containerPort: 5432
  mongodb:
    env:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: sausage-store
    containerPort: 27017
